@page "/Studio"
@using System.Xml
@using BlazorMonaco
@using BlazorMonaco.Editor
@using BlazorMonaco.Languages
@using System.Xml.Xsl
@inject IJSRuntime _jsRuntime
@inject NavigationManager _navigation

<PageTitle>Editor</PageTitle>

<RadzenSplitter Orientation="Orientation.Vertical">
    <RadzenSplitterPane>
        <RadzenSplitter Orientation="Orientation.Horizontal">
            <RadzenSplitterPane>
                <div class="editor-container">
                    <b>Xml Editor</b>
                    <StandaloneCodeEditor CssClass="editor-container h-100 w-100" Id="xmlEditorId" @ref="_editorXml"
                                          ConstructionOptions="XmlConstructionOptions"
                                          OnDidChangeModelContent="@(async () => await OnXmlChanged())" />
                </div>
            </RadzenSplitterPane>
            <RadzenSplitterPane>
                <div class="editor-container">
                    <b>Xslt Editor</b>
                    <StandaloneCodeEditor CssClass="editor-container h-100 w-100" Id="xsltEditorId" @ref="_editorXslt"
                                          ConstructionOptions="XsltConstructionOptions"
                                          OnDidChangeModelContent="@(async () => await OnXsltChanged())" />
                </div>
            </RadzenSplitterPane>
        </RadzenSplitter>
    </RadzenSplitterPane>
</RadzenSplitter>

<div class="html-container overflow-auto">
    <b>Html</b>
    <div class="a4">
        @((MarkupString)Html)
    </div>
</div>

@code {
    private string Xml { get; set; } = string.Empty;
    private string Xslt { get; set; } = string.Empty;
    private string Html { get; set; } = string.Empty;
    private StandaloneCodeEditor _editorXml;
    private StandaloneCodeEditor _editorXslt;

    protected override async Task OnInitializedAsync()
    {
        await UpdateHtml();
    }

    private async Task OpenInNewWindowXml()
    {
        var xmlContent = await _editorXml.GetValue();
        await _jsRuntime.InvokeVoidAsync("openEditorInNewWindow", "XML Editor", xmlContent, "xml");
    }

    private async Task OpenInNewWindowXslt()
    {
        var xsltContent = await _editorXslt.GetValue();
        await _jsRuntime.InvokeVoidAsync("openEditorInNewWindow", "XSLT Editor", xsltContent, "xml");
    }

    private async Task UpdateHtml()
    {
        try
        {
            XslCompiledTransform xsltCompiled = new XslCompiledTransform();
            var xs = await _editorXslt.GetValue();
            using (var reader = XmlReader.Create(new StringReader(xs)))
            {
                xsltCompiled.Load(reader);
            }

            var xm = await _editorXml.GetValue();
            using var xmlReader = XmlReader.Create(new StringReader(xm));
            using StringWriter writer = new StringWriter();

            xsltCompiled.Transform(xmlReader, null, writer);

            Html = writer.ToString();
        }
        catch (Exception ex)
        {
            Html = $"Error: {ex.Message}";
        }
    }

    private StandaloneEditorConstructionOptions XmlConstructionOptions(StandaloneCodeEditor editor)
    {
        return new StandaloneEditorConstructionOptions
            {
                AutomaticLayout = true,
                Language = "xml",
                Theme = "vs-dark",
                FontSize = 14,
                LineNumbers = "on",
                TabSize = 4,
                Value = @"<?xml version=""1.0"" encoding=""UTF-8""?>
<catalog>
    <cd>
        <title>Empire Burlesque</title>
        <artist>Bob Dylan</artist>
        <country>USA</country>
        <company>Columbia</company>
        <price>10.90</price>
        <year>1985</year>
    </cd>
    <cd>
        <title>Hide your heart</title>
        <artist>Bonnie Tyler</artist>
        <country>UK</country>
        <company>CBS Records</company>
        <price>9.90</price>
        <year>1988</year>
    </cd>
    <!-- Daha fazla CD verisi buraya eklenecek -->
</catalog>"
            };
    }

    private StandaloneEditorConstructionOptions XsltConstructionOptions(StandaloneCodeEditor editor)
    {
        return new StandaloneEditorConstructionOptions
            {
                AutomaticLayout = true,
                Language = "xml",
                Theme = "vs-dark",
                FontSize = 14,
                LineNumbers = "on",
                TabSize = 4,
                Value = @"<?xml version=""1.0"" encoding=""UTF-8""?>
<xsl:stylesheet version=""1.0"" xmlns:xsl=""http://www.w3.org/1999/XSL/Transform"">
    <xsl:template match=""/"">
        <html>
        <body>
            <h2>My CD Collection</h2>
            <table border=""1"">
                <tr bgcolor=""#9acd32"">
                    <th style=""text-align:left"">Title</th>
                    <th style=""text-align:left"">Artist</th>
                </tr>
                <xsl:for-each select=""catalog/cd"">
                    <tr>
                        <td><xsl:value-of select=""title"" /></td>
                        <td><xsl:value-of select=""artist"" /></td>
                    </tr>
                </xsl:for-each>
            </table>
        </body>
        </html>
    </xsl:template>
</xsl:stylesheet>"
            };
    }


    private async Task OnXmlChanged()
    {
        await UpdateHtml();
    }

    private async Task OnXsltChanged()
    {
        await UpdateHtml();
    }
}
